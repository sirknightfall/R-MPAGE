{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { resolveFetch } from './helper';\nexport class FunctionsClient {\n  constructor(url) {\n    let {\n      headers = {},\n      customFetch\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.url = url;\n    this.headers = headers;\n    this.fetch = resolveFetch(customFetch);\n  }\n  /**\n   * Updates the authorization header\n   * @params token - the new jwt token sent in the authorisation header\n   */\n  setAuth(token) {\n    this.headers.Authorization = `Bearer ${token}`;\n  }\n  /**\n   * Invokes a function\n   * @param functionName - the name of the function to invoke\n   * @param invokeOptions - object with the following properties\n   * `headers`: object representing the headers to send with the request\n   * `body`: the body of the request\n   * `responseType`: how the response should be parsed. The default is `json`\n   */\n  invoke(functionName, invokeOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          headers,\n          body\n        } = invokeOptions !== null && invokeOptions !== void 0 ? invokeOptions : {};\n        const response = yield this.fetch(`${this.url}/${functionName}`, {\n          method: 'POST',\n          headers: Object.assign({}, this.headers, headers),\n          body\n        });\n        const isRelayError = response.headers.get('x-relay-error');\n        if (isRelayError && isRelayError === 'true') {\n          return {\n            data: null,\n            error: new Error(yield response.text())\n          };\n        }\n        let data;\n        const {\n          responseType\n        } = invokeOptions !== null && invokeOptions !== void 0 ? invokeOptions : {};\n        if (!responseType || responseType === 'json') {\n          data = yield response.json();\n        } else if (responseType === 'arrayBuffer') {\n          data = yield response.arrayBuffer();\n        } else if (responseType === 'blob') {\n          data = yield response.blob();\n        } else {\n          data = yield response.text();\n        }\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n}","map":{"version":3,"names":["resolveFetch","FunctionsClient","constructor","url","headers","customFetch","arguments","length","undefined","fetch","setAuth","token","Authorization","invoke","functionName","invokeOptions","body","response","method","Object","assign","isRelayError","get","data","error","Error","text","responseType","json","arrayBuffer","blob"],"sources":["/workspaces/R-MPAGE/rick-and-morty-rating/node_modules/@supabase/functions-js/src/index.ts"],"sourcesContent":["import { resolveFetch } from './helper'\nimport { Fetch, FunctionInvokeOptions } from './types'\n\nexport class FunctionsClient {\n  protected url: string\n  protected headers: Record<string, string>\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      customFetch,\n    }: {\n      headers?: Record<string, string>\n      customFetch?: Fetch\n    } = {}\n  ) {\n    this.url = url\n    this.headers = headers\n    this.fetch = resolveFetch(customFetch)\n  }\n\n  /**\n   * Updates the authorization header\n   * @params token - the new jwt token sent in the authorisation header\n   */\n  setAuth(token: string) {\n    this.headers.Authorization = `Bearer ${token}`\n  }\n\n  /**\n   * Invokes a function\n   * @param functionName - the name of the function to invoke\n   * @param invokeOptions - object with the following properties\n   * `headers`: object representing the headers to send with the request\n   * `body`: the body of the request\n   * `responseType`: how the response should be parsed. The default is `json`\n   */\n  async invoke<T = any>(\n    functionName: string,\n    invokeOptions?: FunctionInvokeOptions\n  ): Promise<{ data: T; error: null } | { data: null; error: Error }> {\n    try {\n      const { headers, body } = invokeOptions ?? {}\n      const response = await this.fetch(`${this.url}/${functionName}`, {\n        method: 'POST',\n        headers: Object.assign({}, this.headers, headers),\n        body,\n      })\n\n      const isRelayError = response.headers.get('x-relay-error')\n      if (isRelayError && isRelayError === 'true') {\n        return { data: null, error: new Error(await response.text()) }\n      }\n\n      let data\n      const { responseType } = invokeOptions ?? {}\n      if (!responseType || responseType === 'json') {\n        data = await response.json()\n      } else if (responseType === 'arrayBuffer') {\n        data = await response.arrayBuffer()\n      } else if (responseType === 'blob') {\n        data = await response.blob()\n      } else {\n        data = await response.text()\n      }\n\n      return { data, error: null }\n    } catch (error: any) {\n      return { data: null, error }\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,YAAY,QAAQ,UAAU;AAGvC,OAAM,MAAOC,eAAe;EAK1BC,YACEC,GAAW,EAOL;IAAA,IANN;MACEC,OAAO,GAAG,EAAE;MACZC;IAAW,IAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAIT,EAAE;IAEN,IAAI,CAACH,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACK,KAAK,GAAGT,YAAY,CAACK,WAAW,CAAC;EACxC;EAEA;;;;EAIAK,OAAOA,CAACC,KAAa;IACnB,IAAI,CAACP,OAAO,CAACQ,aAAa,GAAG,UAAUD,KAAK,EAAE;EAChD;EAEA;;;;;;;;EAQME,MAAMA,CACVC,YAAoB,EACpBC,aAAqC;;MAErC,IAAI;QACF,MAAM;UAAEX,OAAO;UAAEY;QAAI,CAAE,GAAGD,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAI,EAAE;QAC7C,MAAME,QAAQ,GAAG,MAAM,IAAI,CAACR,KAAK,CAAC,GAAG,IAAI,CAACN,GAAG,IAAIW,YAAY,EAAE,EAAE;UAC/DI,MAAM,EAAE,MAAM;UACdd,OAAO,EAAEe,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAChB,OAAO,EAAEA,OAAO,CAAC;UACjDY;SACD,CAAC;QAEF,MAAMK,YAAY,GAAGJ,QAAQ,CAACb,OAAO,CAACkB,GAAG,CAAC,eAAe,CAAC;QAC1D,IAAID,YAAY,IAAIA,YAAY,KAAK,MAAM,EAAE;UAC3C,OAAO;YAAEE,IAAI,EAAE,IAAI;YAAEC,KAAK,EAAE,IAAIC,KAAK,CAAC,MAAMR,QAAQ,CAACS,IAAI,EAAE;UAAC,CAAE;;QAGhE,IAAIH,IAAI;QACR,MAAM;UAAEI;QAAY,CAAE,GAAGZ,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAI,EAAE;QAC5C,IAAI,CAACY,YAAY,IAAIA,YAAY,KAAK,MAAM,EAAE;UAC5CJ,IAAI,GAAG,MAAMN,QAAQ,CAACW,IAAI,EAAE;SAC7B,MAAM,IAAID,YAAY,KAAK,aAAa,EAAE;UACzCJ,IAAI,GAAG,MAAMN,QAAQ,CAACY,WAAW,EAAE;SACpC,MAAM,IAAIF,YAAY,KAAK,MAAM,EAAE;UAClCJ,IAAI,GAAG,MAAMN,QAAQ,CAACa,IAAI,EAAE;SAC7B,MAAM;UACLP,IAAI,GAAG,MAAMN,QAAQ,CAACS,IAAI,EAAE;;QAG9B,OAAO;UAAEH,IAAI;UAAEC,KAAK,EAAE;QAAI,CAAE;OAC7B,CAAC,OAAOA,KAAU,EAAE;QACnB,OAAO;UAAED,IAAI,EAAE,IAAI;UAAEC;QAAK,CAAE;;IAEhC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}