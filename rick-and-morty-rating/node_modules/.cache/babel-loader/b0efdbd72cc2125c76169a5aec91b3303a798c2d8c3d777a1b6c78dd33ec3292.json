{"ast":null,"code":"import{useEffect,useState}from'react';import{supabase}from'../supabaseClient';const useCharacters=()=>{const[characters,setCharacters]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const fetchCharacters=async()=>{try{const response=await fetch('https://rickandmortyapi.com/api/character');const data=await response.json();setCharacters(data.results);}catch(err){setError(err);}finally{setLoading(false);}};fetchCharacters();},[]);const likeCharacter=async characterId=>{const{data,error}=await supabase.from('likes').insert([{character_id:characterId}]);if(error){console.error('Error liking character:',error);}else{setCharacters(prev=>prev.map(char=>char.id===characterId?{...char,likes:(char.likes||0)+1}:char));}};return{characters,loading,error,likeCharacter};};export default useCharacters;","map":{"version":3,"names":["useEffect","useState","supabase","useCharacters","characters","setCharacters","loading","setLoading","error","setError","fetchCharacters","response","fetch","data","json","results","err","likeCharacter","characterId","from","insert","character_id","console","prev","map","char","id","likes"],"sources":["/workspaces/R-MPAGE/rick-and-morty-rating/src/hooks/useCharacters.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { supabase } from '../supabaseClient';\n\nconst useCharacters = () => {\n    const [characters, setCharacters] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchCharacters = async () => {\n            try {\n                const response = await fetch('https://rickandmortyapi.com/api/character');\n                const data = await response.json();\n                setCharacters(data.results);\n            } catch (err) {\n                setError(err);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchCharacters();\n    }, []);\n\n    const likeCharacter = async (characterId) => {\n        const { data, error } = await supabase\n            .from('likes')\n            .insert([{ character_id: characterId }]);\n\n        if (error) {\n            console.error('Error liking character:', error);\n        } else {\n            setCharacters((prev) =>\n                prev.map((char) =>\n                    char.id === characterId ? { ...char, likes: (char.likes || 0) + 1 } : char\n                )\n            );\n        }\n    };\n\n    return { characters, loading, error, likeCharacter };\n};\n\nexport default useCharacters;"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,OAASC,QAAQ,KAAQ,mBAAmB,CAE5C,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CACxB,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGJ,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACK,OAAO,CAAEC,UAAU,CAAC,CAAGN,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACO,KAAK,CAAEC,QAAQ,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CAExCD,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAU,eAAe,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,2CAA2C,CAAC,CACzE,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAClCT,aAAa,CAACQ,IAAI,CAACE,OAAO,CAAC,CAC/B,CAAE,MAAOC,GAAG,CAAE,CACVP,QAAQ,CAACO,GAAG,CAAC,CACjB,CAAC,OAAS,CACNT,UAAU,CAAC,KAAK,CAAC,CACrB,CACJ,CAAC,CAEDG,eAAe,CAAC,CAAC,CACrB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAO,aAAa,CAAG,KAAO,CAAAC,WAAW,EAAK,CACzC,KAAM,CAAEL,IAAI,CAAEL,KAAM,CAAC,CAAG,KAAM,CAAAN,QAAQ,CACjCiB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,CAAC,CAAEC,YAAY,CAAEH,WAAY,CAAC,CAAC,CAAC,CAE5C,GAAIV,KAAK,CAAE,CACPc,OAAO,CAACd,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CACnD,CAAC,IAAM,CACHH,aAAa,CAAEkB,IAAI,EACfA,IAAI,CAACC,GAAG,CAAEC,IAAI,EACVA,IAAI,CAACC,EAAE,GAAKR,WAAW,CAAG,CAAE,GAAGO,IAAI,CAAEE,KAAK,CAAE,CAACF,IAAI,CAACE,KAAK,EAAI,CAAC,EAAI,CAAE,CAAC,CAAGF,IAC1E,CACJ,CAAC,CACL,CACJ,CAAC,CAED,MAAO,CAAErB,UAAU,CAAEE,OAAO,CAAEE,KAAK,CAAES,aAAc,CAAC,CACxD,CAAC,CAED,cAAe,CAAAd,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}