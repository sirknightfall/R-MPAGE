{"ast":null,"code":"import { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestRpcBuilder extends PostgrestBuilder {\n  constructor(url) {\n    let {\n      headers = {},\n      schema,\n      fetch,\n      shouldThrowOnError\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super({\n      fetch,\n      shouldThrowOnError\n    });\n    this.url = new URL(url);\n    this.headers = Object.assign({}, headers);\n    this.schema = schema;\n  }\n  /**\n   * Perform a function call.\n   */\n  rpc(params) {\n    let {\n      head = false,\n      count = null\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (head) {\n      this.method = 'HEAD';\n      if (params) {\n        Object.entries(params).forEach(_ref => {\n          let [name, value] = _ref;\n          this.url.searchParams.append(name, value);\n        });\n      }\n    } else {\n      this.method = 'POST';\n      this.body = params;\n    }\n    if (count) {\n      if (this.headers['Prefer'] !== undefined) this.headers['Prefer'] += `,count=${count}`;else this.headers['Prefer'] = `count=${count}`;\n    }\n    return new PostgrestFilterBuilder(this);\n  }\n}","map":{"version":3,"names":["PostgrestBuilder","PostgrestFilterBuilder","PostgrestRpcBuilder","constructor","url","headers","schema","fetch","shouldThrowOnError","arguments","length","undefined","URL","Object","assign","rpc","params","head","count","method","entries","forEach","_ref","name","value","searchParams","append","body"],"sources":["/workspaces/R-MPAGE/rick-and-morty-rating/node_modules/@supabase/postgrest-js/src/lib/PostgrestRpcBuilder.ts"],"sourcesContent":["import { Fetch, PostgrestBuilder } from './types'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\n\nexport default class PostgrestRpcBuilder<T> extends PostgrestBuilder<T> {\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n      shouldThrowOnError,\n    }: {\n      headers?: { [key: string]: string }\n      schema?: string\n      fetch?: Fetch\n      shouldThrowOnError?: boolean\n    } = {}\n  ) {\n    super(({ fetch, shouldThrowOnError } as unknown) as PostgrestBuilder<T>)\n    this.url = new URL(url)\n    this.headers = { ...headers }\n    this.schema = schema\n  }\n\n  /**\n   * Perform a function call.\n   */\n  rpc(\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    if (head) {\n      this.method = 'HEAD'\n\n      if (params) {\n        Object.entries(params).forEach(([name, value]) => {\n          this.url.searchParams.append(name, value)\n        })\n      }\n    } else {\n      this.method = 'POST'\n      this.body = params\n    }\n\n    if (count) {\n      if (this.headers['Prefer'] !== undefined) this.headers['Prefer'] += `,count=${count}`\n      else this.headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder(this)\n  }\n}\n"],"mappings":"AAAA,SAAgBA,gBAAgB,QAAQ,SAAS;AACjD,OAAOC,sBAAsB,MAAM,0BAA0B;AAE7D,eAAc,MAAOC,mBAAuB,SAAQF,gBAAmB;EACrEG,YACEC,GAAW,EAWL;IAAA,IAVN;MACEC,OAAO,GAAG,EAAE;MACZC,MAAM;MACNC,KAAK;MACLC;IAAkB,IAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAMhB,EAAE;IAEN,KAAK,CAAE;MAAEF,KAAK;MAAEC;IAAkB,CAAqC,CAAC;IACxE,IAAI,CAACJ,GAAG,GAAG,IAAIQ,GAAG,CAACR,GAAG,CAAC;IACvB,IAAI,CAACC,OAAO,GAAAQ,MAAA,CAAAC,MAAA,KAAQT,OAAO,CAAE;IAC7B,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAEA;;;EAGAS,GAAGA,CACDC,MAAe,EAOT;IAAA,IANN;MACEC,IAAI,GAAG,KAAK;MACZC,KAAK,GAAG;IAAI,IAAAT,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAIV,EAAE;IAEN,IAAIQ,IAAI,EAAE;MACR,IAAI,CAACE,MAAM,GAAG,MAAM;MAEpB,IAAIH,MAAM,EAAE;QACVH,MAAM,CAACO,OAAO,CAACJ,MAAM,CAAC,CAACK,OAAO,CAACC,IAAA,IAAkB;UAAA,IAAjB,CAACC,IAAI,EAAEC,KAAK,CAAC,GAAAF,IAAA;UAC3C,IAAI,CAAClB,GAAG,CAACqB,YAAY,CAACC,MAAM,CAACH,IAAI,EAAEC,KAAK,CAAC;QAC3C,CAAC,CAAC;;KAEL,MAAM;MACL,IAAI,CAACL,MAAM,GAAG,MAAM;MACpB,IAAI,CAACQ,IAAI,GAAGX,MAAM;;IAGpB,IAAIE,KAAK,EAAE;MACT,IAAI,IAAI,CAACb,OAAO,CAAC,QAAQ,CAAC,KAAKM,SAAS,EAAE,IAAI,CAACN,OAAO,CAAC,QAAQ,CAAC,IAAI,UAAUa,KAAK,EAAE,MAChF,IAAI,CAACb,OAAO,CAAC,QAAQ,CAAC,GAAG,SAASa,KAAK,EAAE;;IAGhD,OAAO,IAAIjB,sBAAsB,CAAC,IAAI,CAAC;EACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}