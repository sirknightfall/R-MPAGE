{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nexport class PostgrestBuilder {\n  constructor(builder) {\n    var _this = this;\n    Object.assign(this, builder);\n    let _fetch;\n    if (builder.fetch) {\n      _fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      _fetch = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return __awaiter(_this, void 0, void 0, function* () {\n          return yield (yield import('cross-fetch')).fetch(...args);\n        });\n      };\n    } else {\n      _fetch = fetch;\n    }\n    this.fetch = function () {\n      return _fetch(...arguments);\n    };\n    this.shouldThrowOnError = builder.shouldThrowOnError || false;\n    this.allowEmpty = builder.allowEmpty || false;\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(throwOnError) {\n    if (throwOnError === null || throwOnError === undefined) {\n      throwOnError = true;\n    }\n    this.shouldThrowOnError = throwOnError;\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (typeof this.schema === 'undefined') {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema;\n    } else {\n      this.headers['Content-Profile'] = this.schema;\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json';\n    }\n    let res = this.fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal\n    }).then(res => __awaiter(this, void 0, void 0, function* () {\n      var _a, _b, _c, _d;\n      let error = null;\n      let data = null;\n      let count = null;\n      let status = res.status;\n      let statusText = res.statusText;\n      if (res.ok) {\n        const isReturnMinimal = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.split(',').includes('return=minimal');\n        if (this.method !== 'HEAD' && !isReturnMinimal) {\n          const text = yield res.text();\n          if (!text) {\n            // discard `text`\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = text;\n          } else {\n            data = JSON.parse(text);\n          }\n        }\n        const countHeader = (_b = this.headers['Prefer']) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\n        const contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1]);\n        }\n      } else {\n        const body = yield res.text();\n        try {\n          error = JSON.parse(body);\n        } catch (_e) {\n          error = {\n            message: body\n          };\n        }\n        if (error && this.allowEmpty && ((_d = error === null || error === void 0 ? void 0 : error.details) === null || _d === void 0 ? void 0 : _d.includes('Results contain 0 rows'))) {\n          error = null;\n          status = 200;\n          statusText = 'OK';\n        }\n        if (error && this.shouldThrowOnError) {\n          throw error;\n        }\n      }\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText,\n        body: data\n      };\n      return postgrestResponse;\n    }));\n    if (!this.shouldThrowOnError) {\n      res = res.catch(fetchError => ({\n        error: {\n          message: `FetchError: ${fetchError.message}`,\n          details: '',\n          hint: '',\n          code: fetchError.code || ''\n        },\n        data: null,\n        body: null,\n        count: null,\n        status: 400,\n        statusText: 'Bad Request'\n      }));\n    }\n    return res.then(onfulfilled, onrejected);\n  }\n}","map":{"version":3,"names":["PostgrestBuilder","constructor","builder","_this","Object","assign","_fetch","fetch","_len","arguments","length","args","Array","_key","__awaiter","shouldThrowOnError","allowEmpty","throwOnError","undefined","then","onfulfilled","onrejected","schema","includes","method","headers","res","url","toString","body","JSON","stringify","signal","error","data","count","status","statusText","ok","isReturnMinimal","_a","split","text","parse","countHeader","_b","match","contentRange","_c","get","parseInt","_e","message","_d","details","postgrestResponse","catch","fetchError","hint","code"],"sources":["/workspaces/R-MPAGE/rick-and-morty-rating/node_modules/@supabase/postgrest-js/src/lib/types.ts"],"sourcesContent":["export type Fetch = typeof fetch\n\n/**\n * Error format\n *\n * {@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}\n */\nexport type PostgrestError = {\n  message: string\n  details: string\n  hint: string\n  code: string\n}\n\n/**\n * Response format\n *\n * {@link https://github.com/supabase/supabase-js/issues/32}\n */\ninterface PostgrestResponseBase {\n  status: number\n  statusText: string\n}\n\ninterface PostgrestResponseSuccess<T> extends PostgrestResponseBase {\n  error: null\n  data: T[]\n  body: T[]\n  count: number | null\n}\ninterface PostgrestResponseFailure extends PostgrestResponseBase {\n  error: PostgrestError\n  data: null\n  // For backward compatibility: body === data\n  body: null\n  count: null\n}\nexport type PostgrestResponse<T> = PostgrestResponseSuccess<T> | PostgrestResponseFailure\n\ninterface PostgrestSingleResponseSuccess<T> extends PostgrestResponseBase {\n  error: null\n  data: T\n  // For backward compatibility: body === data\n  body: T\n}\nexport type PostgrestSingleResponse<T> =\n  | PostgrestSingleResponseSuccess<T>\n  | PostgrestResponseFailure\nexport type PostgrestMaybeSingleResponse<T> = PostgrestSingleResponse<T | null>\n\nexport abstract class PostgrestBuilder<T> implements PromiseLike<PostgrestResponse<T>> {\n  protected method!: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n  protected url!: URL\n  protected headers!: { [key: string]: string }\n  protected schema?: string\n  protected body?: Partial<T> | Partial<T>[]\n  protected shouldThrowOnError: boolean\n  protected signal?: AbortSignal\n  protected fetch: Fetch\n  protected allowEmpty: boolean\n\n  constructor(builder: PostgrestBuilder<T>) {\n    Object.assign(this, builder)\n    let _fetch: Fetch\n    if (builder.fetch) {\n      _fetch = builder.fetch\n    } else if (typeof fetch === 'undefined') {\n      _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\n    } else {\n      _fetch = fetch\n    }\n    this.fetch = (...args) => _fetch(...args)\n    this.shouldThrowOnError = builder.shouldThrowOnError || false\n    this.allowEmpty = builder.allowEmpty || false\n  }\n\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(throwOnError?: boolean): this {\n    if (throwOnError === null || throwOnError === undefined) {\n      throwOnError = true\n    }\n    this.shouldThrowOnError = throwOnError\n    return this\n  }\n\n  then<TResult1 = PostgrestResponse<T>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: PostgrestResponse<T>) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (typeof this.schema === 'undefined') {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema\n    } else {\n      this.headers['Content-Profile'] = this.schema\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json'\n    }\n\n    let res = this.fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal,\n    }).then(async (res) => {\n      let error = null\n      let data = null\n      let count = null\n      let status = res.status\n      let statusText = res.statusText\n\n      if (res.ok) {\n        const isReturnMinimal = this.headers['Prefer']?.split(',').includes('return=minimal')\n        if (this.method !== 'HEAD' && !isReturnMinimal) {\n          const text = await res.text()\n          if (!text) {\n            // discard `text`\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = text\n          } else {\n            data = JSON.parse(text)\n          }\n        }\n\n        const countHeader = this.headers['Prefer']?.match(/count=(exact|planned|estimated)/)\n        const contentRange = res.headers.get('content-range')?.split('/')\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1])\n        }\n      } else {\n        const body = await res.text()\n\n        try {\n          error = JSON.parse(body)\n        } catch {\n          error = {\n            message: body,\n          }\n        }\n\n        if (error && this.allowEmpty && error?.details?.includes('Results contain 0 rows')) {\n          error = null\n          status = 200\n          statusText = 'OK'\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw error\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText,\n        body: data,\n      }\n\n      return postgrestResponse\n    })\n    if (!this.shouldThrowOnError) {\n      res = res.catch((fetchError) => ({\n        error: {\n          message: `FetchError: ${fetchError.message}`,\n          details: '',\n          hint: '',\n          code: fetchError.code || '',\n        },\n        data: null,\n        body: null,\n        count: null,\n        status: 400,\n        statusText: 'Bad Request',\n      }))\n    }\n\n    return res.then(onfulfilled, onrejected)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}