{"ast":null,"code":"import { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestQueryBuilder extends PostgrestBuilder {\n  constructor(url) {\n    let {\n      headers = {},\n      schema,\n      fetch,\n      shouldThrowOnError\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super({\n      fetch,\n      shouldThrowOnError\n    });\n    this.url = new URL(url);\n    this.headers = Object.assign({}, headers);\n    this.schema = schema;\n  }\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   * @param head  When set to true, select will void data.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  select() {\n    let columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';\n    let {\n      head = false,\n      count = null\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.method = 'GET';\n    // Remove whitespaces except when quoted\n    let quoted = false;\n    const cleanedColumns = columns.split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`;\n    }\n    if (head) {\n      this.method = 'HEAD';\n    }\n    return new PostgrestFilterBuilder(this);\n  }\n  insert(values) {\n    let {\n      upsert = false,\n      onConflict,\n      returning = 'representation',\n      count = null\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.method = 'POST';\n    const prefersHeaders = [`return=${returning}`];\n    if (upsert) prefersHeaders.push('resolution=merge-duplicates');\n    if (upsert && onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n    this.body = values;\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n        this.url.searchParams.set('columns', uniqueColumns.join(','));\n      }\n    }\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs an UPSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n   */\n  upsert(values) {\n    let {\n      onConflict,\n      returning = 'representation',\n      count = null,\n      ignoreDuplicates = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.method = 'POST';\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`, `return=${returning}`];\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n    this.body = values;\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs an UPDATE on the table.\n   *\n   * @param values  The values to update.\n   * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  update(values) {\n    let {\n      returning = 'representation',\n      count = null\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.method = 'PATCH';\n    const prefersHeaders = [`return=${returning}`];\n    this.body = values;\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs a DELETE on the table.\n   *\n   * @param returning  If `true`, return the deleted row(s) in the response.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  delete() {\n    let {\n      returning = 'representation',\n      count = null\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.method = 'DELETE';\n    const prefersHeaders = [`return=${returning}`];\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n}","map":{"version":3,"names":["PostgrestBuilder","PostgrestFilterBuilder","PostgrestQueryBuilder","constructor","url","headers","schema","fetch","shouldThrowOnError","arguments","length","undefined","URL","Object","assign","select","columns","head","count","method","quoted","cleanedColumns","split","map","c","test","join","searchParams","set","insert","values","upsert","onConflict","returning","prefersHeaders","push","body","unshift","Array","isArray","reduce","acc","x","concat","keys","uniqueColumns","Set","column","ignoreDuplicates","update","delete"],"sources":["/workspaces/R-MPAGE/rick-and-morty-rating/node_modules/@supabase/postgrest-js/src/lib/PostgrestQueryBuilder.ts"],"sourcesContent":["import { Fetch, PostgrestBuilder } from './types'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\n\nexport default class PostgrestQueryBuilder<T> extends PostgrestBuilder<T> {\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n      shouldThrowOnError,\n    }: {\n      headers?: { [key: string]: string }\n      schema?: string\n      fetch?: Fetch\n      shouldThrowOnError?: boolean\n    } = {}\n  ) {\n    super(({ fetch, shouldThrowOnError } as unknown) as PostgrestBuilder<T>)\n    this.url = new URL(url)\n    this.headers = { ...headers }\n    this.schema = schema\n  }\n\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   * @param head  When set to true, select will void data.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  select(\n    columns = '*',\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'GET'\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = columns\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`\n    }\n    if (head) {\n      this.method = 'HEAD'\n    }\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an INSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  insert(\n    values: Partial<T> | Partial<T>[],\n    options?: {\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<T>\n  /**\n   * @deprecated Use `upsert()` instead.\n   */\n  insert(\n    values: Partial<T> | Partial<T>[],\n    options?: {\n      upsert?: boolean\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<T>\n  insert(\n    values: Partial<T> | Partial<T>[],\n    {\n      upsert = false,\n      onConflict,\n      returning = 'representation',\n      count = null,\n    }: {\n      upsert?: boolean\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'POST'\n\n    const prefersHeaders = [`return=${returning}`]\n    if (upsert) prefersHeaders.push('resolution=merge-duplicates')\n\n    if (upsert && onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an UPSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n   */\n  upsert(\n    values: Partial<T> | Partial<T>[],\n    {\n      onConflict,\n      returning = 'representation',\n      count = null,\n      ignoreDuplicates = false,\n    }: {\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n      ignoreDuplicates?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'POST'\n\n    const prefersHeaders = [\n      `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`,\n      `return=${returning}`,\n    ]\n\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an UPDATE on the table.\n   *\n   * @param values  The values to update.\n   * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  update(\n    values: Partial<T>,\n    {\n      returning = 'representation',\n      count = null,\n    }: {\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'PATCH'\n    const prefersHeaders = [`return=${returning}`]\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs a DELETE on the table.\n   *\n   * @param returning  If `true`, return the deleted row(s) in the response.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  delete({\n    returning = 'representation',\n    count = null,\n  }: {\n    returning?: 'minimal' | 'representation'\n    count?: null | 'exact' | 'planned' | 'estimated'\n  } = {}): PostgrestFilterBuilder<T> {\n    this.method = 'DELETE'\n    const prefersHeaders = [`return=${returning}`]\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n    return new PostgrestFilterBuilder(this)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}