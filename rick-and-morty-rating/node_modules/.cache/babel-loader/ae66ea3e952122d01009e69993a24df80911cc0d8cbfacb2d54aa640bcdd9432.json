{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/workspaces/R-MPAGE/rick-and-morty-rating/node_modules/@supabase/gotrue-js/src/lib/types.ts"],"sourcesContent":["export type Provider =\n  | 'apple'\n  | 'azure'\n  | 'bitbucket'\n  | 'discord'\n  | 'facebook'\n  | 'github'\n  | 'gitlab'\n  | 'google'\n  | 'keycloak'\n  | 'linkedin'\n  | 'notion'\n  | 'slack'\n  | 'spotify'\n  | 'twitch'\n  | 'twitter'\n  | 'workos'\n\nexport type AuthChangeEvent =\n  | 'PASSWORD_RECOVERY'\n  | 'SIGNED_IN'\n  | 'SIGNED_OUT'\n  | 'TOKEN_REFRESHED'\n  | 'USER_UPDATED'\n  | 'USER_DELETED'\n\nexport interface ApiError {\n  message: string\n  status: number\n}\n\nexport interface Session {\n  provider_token?: string | null\n  provider_refresh_token?: string | null\n  access_token: string\n  /**\n   * The number of seconds until the token expires (since it was issued). Returned when a login is confirmed.\n   */\n  expires_in?: number\n  /**\n   * A timestamp of when the token will expire. Returned when a login is confirmed.\n   */\n  expires_at?: number\n  refresh_token?: string\n  token_type: string\n  user: User | null\n}\n\nexport interface UserIdentity {\n  id: string\n  user_id: string\n  identity_data: {\n    [key: string]: any\n  }\n  provider: string\n  created_at: string\n  last_sign_in_at: string\n  updated_at?: string\n}\n\nexport interface UserAppMetadata {\n  provider?: string\n  [key: string]: any\n}\n\nexport interface UserMetadata {\n  [key: string]: any\n}\n\nexport interface User {\n  id: string\n  app_metadata: UserAppMetadata\n  user_metadata: UserMetadata\n  aud: string\n  confirmation_sent_at?: string\n  recovery_sent_at?: string\n  email_change_sent_at?: string\n  new_email?: string\n  invited_at?: string\n  action_link?: string\n  email?: string\n  phone?: string\n  created_at: string\n  confirmed_at?: string\n  email_confirmed_at?: string\n  phone_confirmed_at?: string\n  last_sign_in_at?: string\n  role?: string\n  updated_at?: string\n  identities?: UserIdentity[]\n}\n\nexport interface UserAttributes {\n  /**\n   * The user's email.\n   */\n  email?: string\n\n  /**\n   * The user's phone.\n   */\n  phone?: string\n\n  /**\n   * The user's password.\n   */\n  password?: string\n\n  /**\n   * An email change token.\n   */\n  email_change_token?: string\n\n  /**\n   * A custom data object for user_metadata that a user can modify. Can be any JSON.\n   */\n  data?: object\n}\n\nexport interface AdminUserAttributes extends UserAttributes {\n  /**\n   * A custom data object for user_metadata.\n   *\n   * Can be any JSON.\n   *\n   * Only a service role can modify.\n   *\n   * Note: When using the GoTrueAdminApi and wanting to modify a user's user_metadata,\n   * this attribute is used instead of UserAttributes data.\n   *\n   */\n  user_metadata?: object\n\n  /**\n   * A custom data object for app_metadata that.\n   *\n   * Only a service role can modify.\n   *\n   * Can be any JSON that includes app-specific info, such as identity providers, roles, and other\n   * access control information.\n   */\n  app_metadata?: object\n\n  /**\n   * Sets if a user has confirmed their email address.\n   *\n   * Only a service role can modify.\n   */\n  email_confirm?: boolean\n\n  /**\n   * Sets if a user has confirmed their phone number.\n   *\n   * Only a service role can modify.\n   */\n  phone_confirm?: boolean\n}\n\nexport interface Subscription {\n  /**\n   * The subscriber UUID. This will be set by the client.\n   */\n  id: string\n  /**\n   * The function to call every time there is an event. eg: (eventName) => {}\n   */\n  callback: (event: AuthChangeEvent, session: Session | null) => void\n  /**\n   * Call this to remove the listener.\n   */\n  unsubscribe: () => void\n}\n\nexport interface CookieOptions {\n  // (Optional) The Cookie name prefix. Defaults to `sb` meaning the cookies will be `sb-access-token` and `sb-refresh-token`.\n  name?: string\n  // (Optional) The cookie lifetime (expiration) in seconds. Set to 8 hours by default.\n  lifetime?: number\n  // (Optional) The cookie domain this should run on. Leave it blank to restrict it to your domain.\n  domain?: string\n  path?: string\n  // (Optional) SameSite configuration for the session cookie. Defaults to 'lax', but can be changed to 'strict' or 'none'. Set it to false if you want to disable the SameSite setting.\n  sameSite?: string\n}\n\nexport interface UserCredentials {\n  email?: string\n  phone?: string\n  password?: string\n  refreshToken?: string\n  // (Optional) The name of the provider.\n  provider?: Provider\n  oidc?: OpenIDConnectCredentials\n}\n\nexport type VerifyOTPParams = VerifyMobileOTPParams | VerifyEmailOTPParams\nexport interface VerifyMobileOTPParams {\n  email?: undefined\n  phone: string\n  token: string\n  type?: MobileOTPType\n}\nexport interface VerifyEmailOTPParams {\n  email: string\n  phone?: undefined\n  token: string\n  type: EmailOTPType\n}\nexport type MobileOTPType = 'sms' | 'phone_change'\nexport type EmailOTPType = 'signup' | 'invite' | 'magiclink' | 'recovery' | 'email_change'\n\nexport interface OpenIDConnectCredentials {\n  id_token: string\n  nonce: string\n  provider?: Provider\n  client_id?: string\n  issuer?: string\n}\n\ntype AnyFunction = (...args: any[]) => any\ntype MaybePromisify<T> = T | Promise<T>\n\ntype PromisifyMethods<T> = {\n  [K in keyof T]: T[K] extends AnyFunction\n    ? (...args: Parameters<T[K]>) => MaybePromisify<ReturnType<T[K]>>\n    : T[K]\n}\n\nexport type SupportedStorage = PromisifyMethods<Pick<Storage, 'getItem' | 'setItem' | 'removeItem'>>\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}