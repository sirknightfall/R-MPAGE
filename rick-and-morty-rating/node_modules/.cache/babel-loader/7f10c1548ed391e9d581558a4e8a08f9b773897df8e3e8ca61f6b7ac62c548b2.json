{"ast":null,"code":"import { PostgrestQueryBuilder } from '@supabase/postgrest-js';\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient';\nexport class SupabaseQueryBuilder extends PostgrestQueryBuilder {\n  constructor(url, _ref) {\n    let {\n      headers = {},\n      schema,\n      realtime,\n      table,\n      fetch,\n      shouldThrowOnError\n    } = _ref;\n    super(url, {\n      headers,\n      schema,\n      fetch,\n      shouldThrowOnError\n    });\n    this._subscription = null;\n    this._realtime = realtime;\n    this._headers = headers;\n    this._schema = schema;\n    this._table = table;\n  }\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n  on(event, callback) {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect();\n    }\n    if (!this._subscription) {\n      this._subscription = new SupabaseRealtimeClient(this._realtime, this._headers, this._schema, this._table);\n    }\n    return this._subscription.on(event, callback);\n  }\n}","map":{"version":3,"names":["PostgrestQueryBuilder","SupabaseRealtimeClient","SupabaseQueryBuilder","constructor","url","_ref","headers","schema","realtime","table","fetch","shouldThrowOnError","_subscription","_realtime","_headers","_schema","_table","on","event","callback","isConnected","connect"],"sources":["/workspaces/R-MPAGE/rick-and-morty-rating/node_modules/@supabase/supabase-js/src/lib/SupabaseQueryBuilder.ts"],"sourcesContent":["import { PostgrestQueryBuilder } from '@supabase/postgrest-js'\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient'\nimport { RealtimeClient } from '@supabase/realtime-js'\nimport { Fetch, GenericObject, SupabaseEventTypes, SupabaseRealtimePayload } from './types'\n\nexport class SupabaseQueryBuilder<T> extends PostgrestQueryBuilder<T> {\n  private _subscription: SupabaseRealtimeClient | null = null\n  private _realtime: RealtimeClient\n  private _headers: GenericObject\n  private _schema: string\n  private _table: string\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      realtime,\n      table,\n      fetch,\n      shouldThrowOnError,\n    }: {\n      headers?: GenericObject\n      schema: string\n      realtime: RealtimeClient\n      table: string\n      fetch?: Fetch\n      shouldThrowOnError?: boolean\n    }\n  ) {\n    super(url, { headers, schema, fetch, shouldThrowOnError })\n\n    this._realtime = realtime\n    this._headers = headers\n    this._schema = schema\n    this._table = table\n  }\n\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n  on(\n    event: SupabaseEventTypes,\n    callback: (payload: SupabaseRealtimePayload<T>) => void\n  ): SupabaseRealtimeClient {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect()\n    }\n    if (!this._subscription) {\n      this._subscription = new SupabaseRealtimeClient(\n        this._realtime,\n        this._headers,\n        this._schema,\n        this._table\n      )\n    }\n    return this._subscription.on(event, callback)\n  }\n}\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,wBAAwB;AAC9D,SAASC,sBAAsB,QAAQ,0BAA0B;AAIjE,OAAM,MAAOC,oBAAwB,SAAQF,qBAAwB;EAOnEG,YACEC,GAAW,EAAAC,IAAA,EAeV;IAAA,IAdD;MACEC,OAAO,GAAG,EAAE;MACZC,MAAM;MACNC,QAAQ;MACRC,KAAK;MACLC,KAAK;MACLC;IAAkB,CAQnB,GAAAN,IAAA;IAED,KAAK,CAACD,GAAG,EAAE;MAAEE,OAAO;MAAEC,MAAM;MAAEG,KAAK;MAAEC;IAAkB,CAAE,CAAC;IAxBpD,KAAAC,aAAa,GAAkC,IAAI;IA0BzD,IAAI,CAACC,SAAS,GAAGL,QAAQ;IACzB,IAAI,CAACM,QAAQ,GAAGR,OAAO;IACvB,IAAI,CAACS,OAAO,GAAGR,MAAM;IACrB,IAAI,CAACS,MAAM,GAAGP,KAAK;EACrB;EAEA;;;;;EAKAQ,EAAEA,CACAC,KAAyB,EACzBC,QAAuD;IAEvD,IAAI,CAAC,IAAI,CAACN,SAAS,CAACO,WAAW,EAAE,EAAE;MACjC,IAAI,CAACP,SAAS,CAACQ,OAAO,EAAE;;IAE1B,IAAI,CAAC,IAAI,CAACT,aAAa,EAAE;MACvB,IAAI,CAACA,aAAa,GAAG,IAAIX,sBAAsB,CAC7C,IAAI,CAACY,SAAS,EACd,IAAI,CAACC,QAAQ,EACb,IAAI,CAACC,OAAO,EACZ,IAAI,CAACC,MAAM,CACZ;;IAEH,OAAO,IAAI,CAACJ,aAAa,CAACK,EAAE,CAACC,KAAK,EAAEC,QAAQ,CAAC;EAC/C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}