{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { get, post, remove } from './fetch';\nimport { resolveFetch } from './helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nconst DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport class StorageFileApi {\n  constructor(url) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    let fetch = arguments.length > 3 ? arguments[3] : undefined;\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  uploadOrUpdate(method, path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n          'x-upsert': String(options.upsert)\n        });\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n        const cleanPath = this._removeEmptyFolders(path);\n        const _path = this._getFinalPath(cleanPath);\n        const res = yield this.fetch(`${this.url}/object/${_path}`, {\n          method,\n          body: body,\n          headers\n        });\n        if (res.ok) {\n          // const data = await res.json()\n          // temporary fix till backend is updated to the latest storage-api version\n          return {\n            data: {\n              Key: _path\n            },\n            error: null\n          };\n        } else {\n          const error = yield res.json();\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  upload(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  update(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Moves an existing file.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n  move(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/move`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Copies an existing file.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  copy(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/copy`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Create signed URL to download file without requiring permissions. This URL can be valid for a set number of seconds.\n   *\n   * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   */\n  createSignedUrl(path, expiresIn) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const _path = this._getFinalPath(path);\n        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, {\n          expiresIn\n        }, {\n          headers: this.headers\n        });\n        const signedURL = `${this.url}${data.signedURL}`;\n        data = {\n          signedURL\n        };\n        return {\n          data,\n          error: null,\n          signedURL\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error,\n          signedURL: null\n        };\n      }\n    });\n  }\n  /**\n   * Create signed URLs to download files without requiring permissions. These URLs can be valid for a set number of seconds.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   */\n  createSignedUrls(paths, expiresIn) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n          expiresIn,\n          paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: data.map(datum => Object.assign(Object.assign({}, datum), {\n            signedURL: datum.signedURL ? `${this.url}${datum.signedURL}` : null\n          })),\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Downloads a file.\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  download(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const _path = this._getFinalPath(path);\n        const res = yield get(this.fetch, `${this.url}/object/${_path}`, {\n          headers: this.headers,\n          noResolveJson: true\n        });\n        const data = yield res.blob();\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Retrieve URLs for assets in public buckets\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  getPublicUrl(path) {\n    try {\n      const _path = this._getFinalPath(path);\n      const publicURL = `${this.url}/object/public/${_path}`;\n      const data = {\n        publicURL\n      };\n      return {\n        data,\n        error: null,\n        publicURL\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error,\n        publicURL: null\n      };\n    }\n  }\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to be deleted, including the path and file name. For example [`folder/image.png`].\n   */\n  remove(paths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, {\n          prefixes: paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   * @param options Search options, including `limit`, `offset`, `sortBy`, and `search`.\n   * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n   */\n  list(path, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n          prefix: path || ''\n        });\n        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  _getFinalPath(path) {\n    return `${this.bucketId}/${path}`;\n  }\n  _removeEmptyFolders(path) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n  }\n}","map":{"version":3,"names":["get","post","remove","resolveFetch","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","constructor","url","headers","arguments","length","undefined","bucketId","fetch","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","Object","assign","String","Blob","FormData","append","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","ok","data","Key","error","json","upload","update","move","fromPath","toPath","sourceKey","destinationKey","copy","createSignedUrl","expiresIn","signedURL","createSignedUrls","paths","map","datum","download","noResolveJson","blob","getPublicUrl","publicURL","prefixes","list","parameters","prefix","replace"],"sources":["/workspaces/R-MPAGE/rick-and-morty-rating/node_modules/@supabase/storage-js/src/lib/StorageFileApi.ts"],"sourcesContent":["import { Fetch, FetchParameters, get, post, remove } from './fetch'\nimport { resolveFetch } from './helpers'\nimport { FileObject, FileOptions, SearchOptions } from './types'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\nexport class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const cleanPath = this._removeEmptyFolders(path)\n      const _path = this._getFinalPath(cleanPath)\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\n        method,\n        body: body as BodyInit,\n        headers,\n      })\n\n      if (res.ok) {\n        // const data = await res.json()\n        // temporary fix till backend is updated to the latest storage-api version\n        return { data: { Key: _path }, error: null }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async upload(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n  async move(\n    fromPath: string,\n    toPath: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Copies an existing file.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  async copy(\n    fromPath: string,\n    toPath: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/copy`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Create signed URL to download file without requiring permissions. This URL can be valid for a set number of seconds.\n   *\n   * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number\n  ): Promise<{\n    data: { signedURL: string } | null\n    error: Error | null\n    signedURL: string | null\n  }> {\n    try {\n      const _path = this._getFinalPath(path)\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn },\n        { headers: this.headers }\n      )\n      const signedURL = `${this.url}${data.signedURL}`\n      data = { signedURL }\n      return { data, error: null, signedURL }\n    } catch (error) {\n      return { data: null, error, signedURL: null }\n    }\n  }\n\n  /**\n   * Create signed URLs to download files without requiring permissions. These URLs can be valid for a set number of seconds.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   */\n  async createSignedUrls(\n    paths: string[],\n    expiresIn: number\n  ): Promise<{\n    data: { error: string | null; path: string | null; signedURL: string }[] | null\n    error: Error | null\n  }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${this.bucketId}`,\n        { expiresIn, paths },\n        { headers: this.headers }\n      )\n      return {\n        data: data.map((datum: { signedURL: string }) => ({\n          ...datum,\n          signedURL: datum.signedURL ? `${this.url}${datum.signedURL}` : null,\n        })),\n        error: null,\n      }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Downloads a file.\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  async download(path: string): Promise<{ data: Blob | null; error: Error | null }> {\n    try {\n      const _path = this._getFinalPath(path)\n      const res = await get(this.fetch, `${this.url}/object/${_path}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n      const data = await res.blob()\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Retrieve URLs for assets in public buckets\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  getPublicUrl(\n    path: string\n  ): {\n    data: { publicURL: string } | null\n    error: Error | null\n    publicURL: string | null\n  } {\n    try {\n      const _path = this._getFinalPath(path)\n      const publicURL = `${this.url}/object/public/${_path}`\n      const data = { publicURL }\n      return { data, error: null, publicURL }\n    } catch (error) {\n      return { data: null, error, publicURL: null }\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to be deleted, including the path and file name. For example [`folder/image.png`].\n   */\n  async remove(paths: string[]): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   * @param options Search options, including `limit`, `offset`, `sortBy`, and `search`.\n   * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  _getFinalPath(path: string) {\n    return `${this.bucketId}/${path}`\n  }\n\n  _removeEmptyFolders(path: string) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}